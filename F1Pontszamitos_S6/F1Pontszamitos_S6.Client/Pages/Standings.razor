@page "/standings"
@using F1Pontszamitos_S6.Client.Componenets
@inject HttpClient Http
@rendermode @( new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Standings</PageTitle>
<link href="css/tabella.css" rel="stylesheet" />




@if (driverList.Count == 0)
{
    <Loader/>
    
}
else
{
    <div class="topcontainer">
        <div class="logoNyear">
            <img src="Images/f1logo.png" class="f1logo" />
            <p class="year">2024</p>
        </div>
        <div class="titleNgp">
            <p class="title">ISMERETTSÉGSHIP<br>CHAMPIONSHIP</p>
            <p class="currentgp">POINTS AFTER THE<br> @currentRace</p>
        </div>
    </div>


    <span class="drivers table-title">Driver's Championship</span>

    <div class="driverstabContainer">

        <table class="table-reg table-gaps">

            @for (int i = 0; i < driverList.Count / 2; i++)
            {
                <tr class="table-row @driverList[i].Team_id.ToString()" style="background-color: @driverList[i].GetBgColor(teamList)">
                    <td><img class="img" src="../Images/LOGO/@String.Concat(driverList[i].GetTeamName(teamList),".png")" /></td>
                    <td class="@String.Concat(n, driverList[i].Team_id.ToString()) name">@driverList[i].Name</td>
                    <td class="tabledrwimg"><img class="img driverIMG" src="../Images/FACES/@String.Concat(driverList[i].Name,".png")" /></td>
                    <td class="point">@driverList[i].GetPoints()</td>
                    @* <td class="changed"><img class="img changedIMG" src="../Images/Arrows/ArrowUp.png" /></td> *@

                    @if (previous.FindIndex(x => x.Id == driverList[i].Id) == i)
                    {
                        <td class="changed"><img class="img changedIMG" src="../Images/Arrows/Idle.png" /></td>
                    }
                    else if (previous.FindIndex(x => x.Id == driverList[i].Id) > i)
                    {
                        <td class="changed"><img class="img changedIMG" src="../Images/Arrows/ArrowUp.png" /></td>
                    }
                    else{
                        <td class="changed"><img class="img changedIMG" src="../Images/Arrows/ArrowDown.png" /></td>
                    }
                </tr>
            }

        </table>

        <table class="table-reg table-gaps">

            @for (int i = driverList.Count / 2; i < driverList.Count; i++)
            {
                <tr class="table-row @driverList[i].Team_id.ToString()" style="background-color: @driverList[i].GetBgColor(teamList)">
                    <td><img class="img" src="../Images/LOGO/@String.Concat(driverList[i].GetTeamName(teamList),".png")" /></td>
                    <td class="@String.Concat(n, driverList[i].Team_id.ToString()) name">@driverList[i].Name</td>
                    <td class="tabledrwimg"><img class="img driverIMG" src="../Images/FACES/@String.Concat(driverList[i].Name,".png")" /></td>
                    <td class="point">@driverList[i].GetPoints()</td>

                    @if (previous.FindIndex(x => x.Id == driverList[i].Id) == i)
                    {
                        <td class="changed"><img class="img changedIMG" src="../Images/Arrows/Idle.png" /></td>
                    }
                    else if (previous.FindIndex(x => x.Id == driverList[i].Id) > i)
                    {
                        <td class="changed"><img class="img changedIMG" src="../Images/Arrows/ArrowUp.png" /></td>
                    }
                    else
                    {
                        <td class="changed"><img class="img changedIMG" src="../Images/Arrows/ArrowDown.png" /></td>
                    }
                </tr>
            }

        </table>


    </div>

    <div class="table-title">

        <span class="constructors">Constructor's Championship</span>
    </div>

    <div class="teamstabContainer">
        <table class="table-team table-gaps">

            @foreach (var s in teamList)
            {
                <tr class="table-row" id="scnd" style="background-color: @s.BgColor">
                    <td><img class="teamlogo" src="Images/LOGO/@String.Concat(s.Name,".png")" /></td>
                    <td class="@String.Concat(n, s.Id.ToString()) name">@s.Name</td>
                    <td class="point">@s.GetPoints(driverList)</td>
                    <td class="changed"><img class="img changedIMG" src="../Images/Arrows/ArrowUp.png" /></td>
                </tr>
            }

        </table>
    </div>


}

@code {
    List<Driver> driverList = new List<Driver>();
    List<Driver> previous = new List<Driver>();
    List<Team> teamList = new List<Team>();
    string n = "_";
    string? currentRace = null;

    protected override async Task OnInitializedAsync()
    {
        var delayTask = Task.Delay(500);

        var HttpRequestTaskDriver = Http.GetFromJsonAsync<List<Driver>>("api/drivers");
        var HttpRequestTaskDriverPrev = Http.GetFromJsonAsync<List<Driver>>("api/drivers/previous");
        var HttpRequestTaskTeam = Http.GetFromJsonAsync<List<Team>>("api/teams");
        var HttpRequestCurrentRace = Http.GetStringAsync("api/main/currentRace");

        await Task.WhenAll(delayTask, HttpRequestTaskDriver, HttpRequestTaskTeam, HttpRequestTaskDriverPrev);

        var HttpRequestResultDriver = await HttpRequestTaskDriver;
        var HttpRequestResultTeam = await HttpRequestTaskTeam;
        var HttpRequestResultDriverPrev = await HttpRequestTaskDriverPrev;

        if (HttpRequestResultDriver is not null)
        {
            driverList = HttpRequestResultDriver;
        }

        if (HttpRequestResultTeam is not null)
        {
            teamList = HttpRequestResultTeam.OrderByDescending(x => x.GetPoints(driverList)).ToList();
        }

        if(HttpRequestCurrentRace is not null)
        {
            currentRace = await HttpRequestCurrentRace;
        }

        if (HttpRequestResultDriverPrev is not null)
        {
            previous = HttpRequestResultDriverPrev;
        }

    }
}
