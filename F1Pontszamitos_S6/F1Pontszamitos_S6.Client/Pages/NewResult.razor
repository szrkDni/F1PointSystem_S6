@page "/newresult"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using F1Pontszamitos_S6.Client.Componenets
@rendermode @( new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>New Race Result</PageTitle>
<link rel="stylesheet" href="css/newresult.css">
<script src="Scripts/password.js"></script>

@if(nextRace is null)
{
    <Loader/>
}
else
{
    <p class="resultOfThe">Result of the @nextRace</p>

    <div class="resultWrapper">
        <EditForm Model="@raceResult" OnSubmit="HandleSubmit">
            
            
                <div class="outer-box">
                <div class="curb leftCurb"></div>
                <div class="container">
                    <div class="line top"></div>

                    <div class="finishline"></div>

                    <div class="line bottom"></div>

                    <Grid driverNamesAndIds="driverNames" raceResult="raceResult" />
                    
                </div>
                <div class="curb rightCurb"></div>
            </div>

            <label class="mt-4 fltext">Fastest Lap</label>
            <InputSelect @bind-Value="fastestManId" class="form-control input input-width"><OptionList driverDict="driverNames" usefor="fastestlap"></OptionList></InputSelect>

            <button type="submit" class="btn btn-primary mt-4 mb-4 btn-cus">Add Result</button>
        </EditForm>
    </div>
}
    


@code {
    int[] raceResult = new int[20];
    int fastestManId;
    string? nextRace = null;
    Dictionary<int,string> driverNames = new();

    private async Task CheckPassword()
    {
        JS.InvokeVoidAsync("passwordProtection");
    }


    protected override async Task OnInitializedAsync()
    {
        await CheckPassword();

        var delayTask = Task.Delay(500);

        var HttpRequestTaskCurrentRace =  Http.GetStringAsync("api/main/nextRace");

        var HttpRequestTaskDNames = Http.GetFromJsonAsync<Dictionary<int, string>>("api/drivers/namesnids");


        await Task.WhenAll(delayTask, HttpRequestTaskCurrentRace, HttpRequestTaskDNames);

        if (HttpRequestTaskCurrentRace is not null)
        {
            nextRace = await HttpRequestTaskCurrentRace;
        }

        if (HttpRequestTaskDNames is not null)
        {
            driverNames = await HttpRequestTaskDNames;
        }

    }

    protected async Task HandleSubmit()
    {
        for (int i = 0; i < raceResult.Length; i++)
        {
            var result = await Http.PutAsJsonAsync($"api/drivers/{raceResult[i]}/{i + 1}/{fastestManId}", new Driver());
        }
        var inactiveResult = await Http.PutAsJsonAsync($"api/drivers/namesnids/inactive/", raceResult);

        NavManager.NavigateTo("standings");
    }

}
