@page "/try"
@using F1Pontszamitos_S6.Client.Componenets
@inject HttpClient Http
@rendermode @( new InteractiveWebAssemblyRenderMode(prerender: false))
@inject NavigationManager NavManager

<PageTitle>Standings</PageTitle>
<link href="css/try.css" rel="stylesheet" />




@if (driverList.Count == 0)
{
    <Loader />

}
else
{
    <div class="cardContainer">
        <div class="card" onclick="@RedirectToDriverC">
            <div class="imageContainer">
                <img class="driverimg Dleft" id="flipped" src="../Images/FACES/lannor01.png" alt="D1">
                <img class="driverimg Dmiddle" src="../Images/FACES/maxver01.png" alt="D2">
                <img class="driverimg Dright" src="../Images/FACES/chalec01.png" alt="D3">
            </div>
            <div class="titleContainer">
                <span class="title">Driver's Championship</span>
            </div>
        </div>
        <div class="card" onclick="">
            <div class="imageContainer">
                <img class=" teamimg " src="../Images/LOGO/Ferrari2.png" alt="D3">
                
            </div>
            <div class="titleContainer">
                <span class="title">Constructor's Championship</span>
            </div>
        </div>
        
    </div>
}

@code {
    List<Driver> driverList = new List<Driver>();
    List<Driver> previous = new List<Driver>();
    List<Team> teamList = new List<Team>();
    string n = "_";
    string? currentRace = null;

    protected override async Task OnInitializedAsync()
    {
        var delayTask = Task.Delay(500);

        var HttpRequestTaskDriver = Http.GetFromJsonAsync<List<Driver>>("api/drivers");
        var HttpRequestTaskDriverPrev = Http.GetFromJsonAsync<List<Driver>>("api/drivers/previous");
        var HttpRequestTaskTeam = Http.GetFromJsonAsync<List<Team>>("api/teams");
        var HttpRequestCurrentRace = Http.GetStringAsync("api/main/currentRace");

        await Task.WhenAll(delayTask, HttpRequestTaskDriver, HttpRequestTaskTeam, HttpRequestTaskDriverPrev);

        var HttpRequestResultDriver = await HttpRequestTaskDriver;
        var HttpRequestResultTeam = await HttpRequestTaskTeam;
        var HttpRequestResultDriverPrev = await HttpRequestTaskDriverPrev;

        if (HttpRequestResultDriver is not null)
        {
            driverList = HttpRequestResultDriver;
        }

        if (HttpRequestResultTeam is not null)
        {
            teamList = HttpRequestResultTeam.OrderByDescending(x => x.GetPoints(driverList)).ToList();
        }

        if (HttpRequestCurrentRace is not null)
        {
            currentRace = await HttpRequestCurrentRace;
        }

        if (HttpRequestResultDriverPrev is not null)
        {
            previous = HttpRequestResultDriverPrev;
        }

    }

    private void RedirectToDriverC()
    {
        NavManager.NavigateTo("standings");
    }
}
